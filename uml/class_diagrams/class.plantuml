@startuml classdiagram

skinparam ClassAttributeIconSize 0
skinparam CircledCharacterRadius 0
skinparam CircledCharacterFontSize 0
skinparam ClassFontStyle bold


' Storage
class PlayerStorage {
  - id: int
  + GetId(): int
  + AddBill(b: BillOfMaterial)
  + AddTeleportGatePair(t1: TeleportGate, t2: TeleportGate)
  + GetOneTeleporter()
  + GetSumResources(): int
  + GetTeleporterCount(): int
  + HasEnoughOf(b: BillOfMaterial): bool
  + PlayerStorage()
  + RemoveBill(b: BillOfMaterial)
  + RemoveTeleportGate(t: TeleportGate)
}

' Collection
class BillOfMaterial {
  + AddMaterial(r: AbstractBaseResource)
  + GetMaterials(): AbstractBaseResource[]
}

' Controller
interface ISteppable << interface >> {
  {abstract} + Step()
}

together {
  class GameController << singleton >> {
    + AddAsteroid(a: Asteroid)
    + AddSettler(s: Settler)
    + CheckGameCondition()
    + CheckLoseCondition()
    + CheckWinCondition()
    + RemoveAsteroid(a: Asteroid)
    + RemoveSettler(s: Settler)
    + StartGame()
    + Step()
  }

  class AIController << singleton >> {
    + AddRobot(r: Robot)
    + AddTeleportGate(t: TeleportGate)
    + AddUfo(u: Ufo)
    + HandleRobot(r: Robot)
    + HandleTeleportGate(t: TeleportGate)
    + HandleUfo(u: Ufo)
    + RemoveRobot(r: Robot)
    + RemoveTeleportGate(t: TeleportGate)
    + RemoveUfo(u: Ufo)
    + Step()
  }

  class SunController << singleton >> {
    - turnsUntilNextSunstorm : int
    - id: int
    + GetId(): int
    + AddAsteroid(a: Asteroid)
    + RemoveAsteroid(a: Asteroid)
    + StartSunstorm()
    + Step()
  }
}

' Crewmate
abstract class AbstractSpaceship {
  # id: int
  + GetId(): int
  {abstract} + Die()
  + Move(n: INeighbour)
  {abstract} + ReactToAsteroidExplosion()
  + SetOnAsteroid(a: Asteroid)
}

abstract class AbstractCrewmate {
  + Drill()
  + SetOnAsteroid(a: Asteroid)
}

interface IMiner << interface >> {
  {abstract} + Mine()
}

interface IStorageCapable << interface >> {
  {abstract} + CraftRobot()
  {abstract} + CraftTeleportGate()
  {abstract} + GetStorage(): PlayerStorage
  {abstract} + PlaceResource(r: AbstractBaseResource)
  {abstract} + PlaceTeleporter()
}

together {
  class Robot {
    + GetId(): int
    + Die()
    + ReactToAsteroidExplosion()
    + Robot(start: Asteroid)
    - Robot()
  }

  class Settler {
    + GetId(): int
    + CraftRobot()
    + CraftTeleportGate()
    + Die()
    + GetStorage(): PlayerStorage
    + Mine()
    + PlaceResource(r: AbstractBaseResource)
    + PlaceTeleporter()
    + ReactToAsteroidExplosion()
    + Settler(start: Asteroid)
    - Settler()
  }

  class Ufo {
    + GetId(): int
    + Die()
    + Mine()
    + ReactToAsteroidExplosion()
    + Ufo(start: Asteroid)
    - Ufo()
  }
}

' Neighbour
interface INeighbour << interface >> {
  {abstract} + Explode()
  {abstract} + ReactToMove(from: Asteroid, c: AbstractCrewmate)
  {abstract} + ReactToSunstorm()
}

class Asteroid {
  - isDiscovered : bool
  - isNearSun : bool
  - numOfLayersRemaining : int
  - id: int
  + GetId(): int
  + AddSpaceship(s: AbstractSpaceship)
  + AddNeighbourAsteroid(a: Asteroid)
  + DecNumOfLayersRemaining()
  + Discover()
  + Explode()
  + GetNeighbours(): Asteroid[]
  + GetRandomNeighbour(): INeighbour
  + GetResource(): AbstractBaseResource
  + GetTeleporter(): TeleportGate
  + KillAllSpaceships()
  + PutResource(s: Settler, r: AbstractBaseResource)
  + ReactToDrill()
  + ReactToMineBy(m: IMiner)
  + ReactToMineBy(m: IMiner, s: PlayerStorage)
  + ReactToMove(t: TeleportGate)
  + ReactToMove(from: Asteroid, s: AbstractSpaceship)
  + ReactToSunNearby()
  + ReactToSunstorm()
  + RemoveSpaceship(s: AbstractSpaceship)
  + RemoveTeleporter()
  + SetIsNearbySun(s: bool)
  + SetNumOfLayersRemaining(l: int)
  + SetResource(r: AbstractBaseResource)
  + SetTeleporter(t: TeleportGate)
}

class TeleportGate {
  - isCrazy: bool
  - id: int
  + GetId(): int
  + Explode()
  + GetHomeAsteroid(): Asteroid
  + GetHomeStorage(): PlayerStorage
  + GetPair(): TeleportGate
  + Move(a: Asteroid)
  + ReactToMove(from: Asteroid, c: AbstractCrewmate)
  + ReactToSunstorm()
  + SetHomeAsteroid(a: Asteroid)
  + SetHomeStorage(s: PlayerStorage)
  + SetPair(t: TeleportGate)
  - ActuallyExplode()
  - ExplodePair()
}

' Resource
abstract class AbstractBaseResource {
  - id: int
  + GetId(): int
  {abstract} + IsSameType(r: AbstractBaseResource): bool
  + ReactToMine(a: Asteroid, c: IMiner)
  + ReactToMine(a: Asteroid, c: IMiner, , s: PlayerStorage)
  + ReactToPlace(a: Asteroid, c: IStorageCapable)
  + ReactToSunNearby(a: Asteroid)
}

together {
  class Coal {
    + IsSameType(r: AbstractBaseResource): bool
  }

  class Iron {
    + IsSameType(r: AbstractBaseResource): bool
  }

  class Uranium {
    - health : int
    + IsSameType(r: AbstractBaseResource): bool
    + ReactToSunNearby(a: Asteroid)
  }

  class Water {
    + IsSameType(r: AbstractBaseResource): bool
    + ReactToSunNearby(a: Asteroid)
  }
}

' Recipe
interface IRecipe << interface >> {
  {abstract} + Craft(c: IStorageCapable, a: Asteroid)
}

interface IIdentifiable <<interface>> {
  + GetId(): int
}

together {
  class RobotRecipe << singleton >> {
    + Craft(c: IStorageCapable, a: Asteroid)
  }

  class TeleporterRecipe << singleton >> {
    + Craft(c: IStorageCapable, a: Asteroid)
  }
}

' Interface realizations
GameController .up.|> ISteppable
AIController .up.|> ISteppable
SunController .up.|> ISteppable
Asteroid .up.|> INeighbour
TeleportGate .up.|> INeighbour
RobotRecipe .up.|> IRecipe
TeleporterRecipe .up.|> IRecipe
Settler .up.|> IStorageCapable
AbstractSpaceship ...|> IIdentifiable
INeighbour --|> IIdentifiable
AbstractBaseResource ..|> IIdentifiable
PlayerStorage ..|> IIdentifiable
SunController ..|> IIdentifiable
Settler .up.|> IMiner
Ufo .up.|> IMiner

' Inheritance
Coal -up-|> AbstractBaseResource
Iron -up-|> AbstractBaseResource
Uranium -up-|> AbstractBaseResource
Water -up-|> AbstractBaseResource
Robot -up-|> AbstractCrewmate
Settler -up-|> AbstractCrewmate
Ufo -up-|> AbstractSpaceship
AbstractCrewmate -up-|> AbstractSpaceship

' Association connections
Asteroid "- homeAsteroid 0..1" -- "- teleporter 0..1" TeleportGate

TeleportGate "- teleporters 0..2" -- "- homeStorage 1" PlayerStorage
TeleportGate o-- "- pair 1" TeleportGate
Settler *-- "- storage 1" PlayerStorage

AbstractSpaceship "- spaceships 0..*" -- "~# onAsteroid 1" Asteroid
Asteroid -- "- neighbouringAsteroids 1..*" Asteroid

SunController o-- "- asteroids 1..*" Asteroid
GameController o-- "- asteroids 1..*" Asteroid
AIController o-- "- robots 0..*" Robot
AIController o-- "- ufos 0..*" Ufo
AIController o-- "- teleporters 0..*" TeleportGate
GameController o-- "- settlers 1..*" Settler

Asteroid o-- "- resource 0..1" AbstractBaseResource
BillOfMaterial o-- "- resources 0..*" AbstractBaseResource
PlayerStorage o-- "~# storedMaterials 0..*" AbstractBaseResource

TeleporterRecipe ..> BillOfMaterial
RobotRecipe ..> BillOfMaterial

@enduml
